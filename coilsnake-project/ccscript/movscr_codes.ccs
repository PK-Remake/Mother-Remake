/*
 * Movement code definitions, by Catador
*/

command adr24(a) "[{byte[0] a} {byte[1] a} {byte[2] a}]" // Borrowed from asm65816.ccs

// Movement script codes
command mov_end                 "[00]"                             // End movement script (think "eob")
command startloop(c)            "[01 {byte c}]"                    // Start a loop with 'c' iterations
command endloop                 "[02]"                             // End a loop and go back to start of loop body if still haven't gone through all iterations
command mov_jml(addr)           "[03 {adr24(addr)}]"               // Analogous to ASM JML, but for movement scripts
command mov_jsl(addr)           "[04 {adr24(addr)}]"               // Analogous to ASM JSL, but for movement scripts
command mov_rtl                 "[05]"                             // Analogous to ASM RTL, but for movement scripts
command mov_wait(frames)        "[06 {byte frames}]"               // Wait 'frames' frames (think "`pause(frames)")
command task(addr)              "[07 {short addr}]"                // Register a background task, a movement script that runs alongside this movement script. Must be in the same bank as the current script
command ontick(addr)            "[08 {adr24(addr)}]"               // Register a "TICK callback", an ASM function that runs every frame for the object
command halt                    "[09]"                             // Halt movement script (infinitely loop it, but don't outright end it)
command jeq(addr)               "[0A {short addr}]"                // Jump to 'addr' if REG is zero (think "BEQ_a(addr)")
command jne(addr)               "[0B {short addr}]"                // Jump to 'addr' if REG is not zero (think "BNE_a(addr)")
command endtask                 "[0C]"                             // End background task (if this movement script is not a task, it just ends the script, I believe)
command mem16_and(addr, val)    "[0D {short addr} 00 {short val}]" // *(uint16_t*)mem &= val
command mem16_or(addr, val)     "[0D {short addr} 01 {short val}]" // *(uint16_t*)mem |= val
command mem16_add(addr, val)    "[0D {short addr} 02 {short val}]" // *(uint16_t*)mem += val
command mem16_xor(addr, val)    "[0D {short addr} 03 {short val}]" // *(uint16_t*)mem ^= val
command mov_var(var, value)     "[0E {byte var} {short value}]"    // Set a specific object VAR to immediate value ('var' must be in range 0..7)
command ontick_nop              "[0F]"                             // Same as "ontick(0xC0943B)", but faster and saves 3 bytes
command multijmp(amount)        "[10 {byte amount}]"               // Switch on REG and JMP (think control code "[09 XX (YYYYYYYY)*XX]")
command multijsr(amount)        "[11 {byte amount}]"               // Switch on REG and JSR (think control code "[1F C0 XX (YYYYYYYY)*XX]")
command mov_mem8(addr, val)     "[12 {short addr} {byte val}]"     // Move 8-bit immediate value to memory
command endlasttask             "[13]"                             // End last registered background task (if no background tasks are running, it just ends the movement script, I believe)
command var_and(var, val)       "[14 {byte var} 00 {short val}]"   // VAR &= val
command var_or(var, val)        "[14 {byte var} 01 {short val}]"   // VAR |= val
command var_add(var, val)       "[14 {byte var} 02 {short val}]"   // VAR += val
command var_xor(var, val)       "[14 {byte var} 03 {short val}]"   // VAR ^= val
command mov_mem16(addr, val)    "[15 {short addr} {short val}]"    // Move 16-bit immediate value to memory
command breakeq(addr)           "[16 {short addr}]"                // JEQ and decrement stack pointer by 3 (clean STARTLOOP stuff)
command breakne(addr)           "[17 {short addr}]"                // JNE and decrement stack pointer by 3 (clean STARTLOOP stuff)
command mem8_and(addr, val)     "[18 {short addr} 00 {byte val}]"  // *(uint8_t*)mem &= val
command mem8_or(addr, val)      "[18 {short addr} 01 {byte val}]"  // *(uint8_t*)mem |= val
command mem8_xor(addr, val)     "[18 {short addr} 03 {byte val}]"  // *(uint8_t*)mem ^= val
command mem8_add(addr, val)     "[18 {short addr} 02 {byte val}]"  // *(uint8_t*)mem += val
command mov_jmp(addr)           "[19 {short addr}]"                // Analogous to ASM JMP, but for movement scripts
command mov_jsr(addr)           "[1A {short addr}]"                // Analogous to ASM JSR, but for movement scripts
command mov_rts                 "[1B]"                             // Analogous to ASM RTS, but for movement scripts
command setsprmap(addr)         "[1C {adr24(addr)}]"               // Set pointer to spritemap data. This is kinda complicated, I also never used this, so I don't really know much about the "spritemap" format
command mov_reg_imm(val)        "[1D {short val}]"                 // Move 16-bit immediate value to REG
command mov_reg_mem(addr)       "[1E {short addr}]"                // Move absolute memory address to REG
command mov_var_reg(var)        "[1F {byte var}]"                  // Move REG to object VAR
command mov_reg_var(var)        "[20 {byte var}]"                  // Move object VAR to REG
command wait_var(var)           "[21 {byte var}]"                  // Wait (object VAR) frames
command ondraw(addr)            "[22 {short addr}]"                // Assign "draw object" callback function. Argument is a short ASM pointer in bank C0
command onposition(addr)        "[23 {short addr}]"                // Assign "calculate screen position" callback function. Argument is a short ASM pointer in bank C0
command startloop_reg           "[24]"                             // Start a loop with REG iterations
command onmove(addr)            "[25 {short addr}]"                // Assign "move object" callback function. Argument is a short ASM pointer in bank C0
command setanim_var(var)        "[26 {byte var}]"                  // Set amimation frame to object VAR
command reg_and(val)            "[27 00 {short val}]"              // REG &= val
command reg_or(val)             "[27 01 {short val}]"              // REG |= val
command reg_add(val)            "[27 02 {short val}]"              // REG += val
command reg_xor(val)            "[27 03 {short val}]"              // REG ^= val
command setxpos(val)            "[28 {short val}]"                 // Set object X position
command setypos(val)            "[29 {short val}]"                 // Set object Y position
command setzpos(val)            "[2A {short val}]"                 // Set object Z position (elevation)
command addxpos(val)            "[2B {short val}]"                 // Add 'val' to object X position (can be negative)
command addypos(val)            "[2C {short val}]"                 // Add 'val' to object Y position (can be negative)
command addzpos(val)            "[2D {short val}]"                 // Add 'val' to object Z position (elevation) (can be negative)
command addxvel(val)            "[2E {short val}]"                 // Add 'val' to object X velocity (can be negative)
command addyvel(val)            "[2F {short val}]"                 // Add 'val' to object Y velocity (can be negative)
command addzvel(val)            "[30 {short val}]"                 // Add 'val' to object Z velocity (elevation) (can be negative)
// 0x31 thru 0x38 are useless, they write to memory locations that are never even referenced in code
command zerovel                 "[39]"                             // Set object X, Y, Z velocities to zero
// 0x3A is useless, it writes to memory locations that are never even referenced in code
command setanim(anim)           "[3B {byte anim}]"                 // Set object animation frame
command incanim                 "[3C]"                             // Increment object animation frame
command decanim                 "[3D]"                             // Decrement object animation frame
command addanim(val)            "[3E {byte val}]"                  // Add 'val' to object animation frame (can be negative)
command setxvel(val)            "[3F {short val}]"                 // Set object X velocity
command setyvel(val)            "[40 {short val}]"                 // Set object Y velocity
command setzvel(val)            "[41 {short val}]"                 // Set object Z velocity (elevation)
command asmcall(addr)           "[42 {adr24(addr)}]"               // Call ASM routine
command priority(val)           "[43 {byte val}]"                  // Set object draw priority ('val' must be in range 0..3)
command wait_reg                "[44]"                             // Wait REG frames

// Special movement script codes
command unlock_text_script      mov_mem16(0x9641, 1) // Same as doing "asmcall(0xC46E46)", but slightly faster

// Movement script ASM calls
command movasm_destroy_thisobj   asmcall(0xC020F1) // Destroy "this" object (object attached to this script)

command movasm_fade(amount, speed) { // Fade screen
    asmcall(0xC09FAE)
    byte amount   // TIP: Use a positive value for a fade-in or a negative value for a fade-out
    byte speed
}

command movasm_mosaic_out(amount, speed, bgs) { // Fade-out with mosaic
    asmcall(0xC0AA07)
    short amount
    short speed
    short bgs
}

command movasm_create_obj(sprite, script) { // Create new object with sprite 'sprite' and script 'script'
    asmcall(0xC0A98B)
    short sprite
    short script
}

command movasm_set_speed(speed) { // Set movement speed of this object (8.8 fixed-point notation. e.g 0x0180 = 1.5)
    asmcall(0xC0A685)
    short speed
}

command movasm_set_facing_anim(facing, anim) { // Set facing direction and animation frame for this object
    asmcall(0xC0AA6E)
    byte facing
    byte anim
}
